// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	imgPoolFieldNames          = builder.RawFieldNames(&ImgPool{})
	imgPoolRows                = strings.Join(imgPoolFieldNames, ",")
	imgPoolRowsExpectAutoSet   = strings.Join(stringx.Remove(imgPoolFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	imgPoolRowsWithPlaceHolder = strings.Join(stringx.Remove(imgPoolFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheImgbjsImgPoolIdPrefix = "cache:imgbjs:imgPool:id:"
	cacheImgbjsImgPoolHashPrefix = "cache:imgbjs:imgPool:hash:"
	cacheImgbjsImgPoolIdentityPrefix = "cache:imgbjs:imgPool:identity:"
)

type (
	imgPoolModel interface {
		Insert(ctx context.Context, data *ImgPool) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ImgPool, error)
		Update(ctx context.Context, data *ImgPool) error
		Delete(ctx context.Context, id int64) error
		FindOneByHash(ctx context.Context, hash string) (*ImgPool, error)
		FindOneByIdentity(ctx context.Context, identity string) (*ImgPool, error)
	}

	defaultImgPoolModel struct {
		sqlc.CachedConn
		table string
	}

	ImgPool struct {
		Id          int64     `db:"id"`
		Identity    string    `db:"identity"`
		Hash        string    `db:"hash"`
		Ext         string    `db:"ext"`
		Size        int64     `db:"size"`
		DownloadUrl string    `db:"download_url"`
		CreateTime  time.Time `db:"create_time"`
	}
)

func newImgPoolModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultImgPoolModel {
	return &defaultImgPoolModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`img_pool`",
	}
}

func (m *defaultImgPoolModel) Delete(ctx context.Context, id int64) error {
	imgbjsImgPoolIdKey := fmt.Sprintf("%s%v", cacheImgbjsImgPoolIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, imgbjsImgPoolIdKey)
	return err
}

func (m *defaultImgPoolModel) FindOne(ctx context.Context, id int64) (*ImgPool, error) {
	imgbjsImgPoolIdKey := fmt.Sprintf("%s%v", cacheImgbjsImgPoolIdPrefix, id)
	var resp ImgPool
	err := m.QueryRowCtx(ctx, &resp, imgbjsImgPoolIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", imgPoolRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultImgPoolModel) Insert(ctx context.Context, data *ImgPool) (sql.Result, error) {
	imgbjsImgPoolIdKey := fmt.Sprintf("%s%v", cacheImgbjsImgPoolIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, imgPoolRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Identity, data.Hash, data.Ext, data.Size, data.DownloadUrl)
	}, imgbjsImgPoolIdKey)
	return ret, err
}

func (m *defaultImgPoolModel) Update(ctx context.Context, data *ImgPool) error {
	imgbjsImgPoolIdKey := fmt.Sprintf("%s%v", cacheImgbjsImgPoolIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, imgPoolRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Identity, data.Hash, data.Ext, data.Size, data.DownloadUrl, data.Id)
	}, imgbjsImgPoolIdKey)
	return err
}

func (m *defaultImgPoolModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheImgbjsImgPoolIdPrefix, primary)
}

func (m *defaultImgPoolModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", imgPoolRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultImgPoolModel) tableName() string {
	return m.table
}

func (m *defaultImgPoolModel) FindOneByHash(ctx context.Context, hash string) (*ImgPool, error) {
	imgbjsImgPoolHashKey := fmt.Sprintf("%s%v", cacheImgbjsImgPoolHashPrefix, hash)
	var resp ImgPool
	err := m.QueryRowCtx(ctx, &resp, imgbjsImgPoolHashKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `hash` = ? limit 1", imgPoolRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, hash)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultImgPoolModel) FindOneByIdentity(ctx context.Context, identity string) (*ImgPool, error) {
	imgbjsImgPoolIdentityKey := fmt.Sprintf("%s%v", cacheImgbjsImgPoolIdentityPrefix, identity)
	var resp ImgPool
	err := m.QueryRowCtx(ctx, &resp, imgbjsImgPoolIdentityKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `identity` = ? limit 1", imgPoolRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, identity)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}